NEW QUESTIONS:

list2.length
why does the array.length not need a () is it not a method call? If not a method what is it?

When to use a varargs as in "private static int methodName (int ... num)" and not just an array

What are some good uses of this? Also what is it really doing?

What does static really do? I get that a in a variable it makes all instances of an object have a variable that points to the
same address. In a method it meant that I don't have to create a new object (not right term?) of that class and I can
just call it directly.

What really are imports doing. I get it means if I want to do Arrays.sort I don't have to type java.util.Arrays.sort
every time but is it just telling the computer all times Arrays is used just put java.util in front of it?

Is there a better way to format this doc?

If you make a method to get or set a private variable in a class should you use that get and set rather then the actual
variable in that class?

Are you really not supposed to have multiple folders of code in a project? I feel like after you hit a certain number
of classes it just gets messy.

When calling System.out.println I'm assuming println is a method, out is a class, and System is... Something special?

ANSWERED QUESTIONS:

What exactly are you doing when you do:
class varName = new class()

//This is creating the memory space for the instantiation of this object
//"new" creates the memory space
//the left class define the type
//List varName = new ArrayList() - e.g. ArrayList if the concrete class that takes up memory, List is the interface
//that define the methods accessible to varName.
//"=" is assignment - for objects this is just a pointer to a memory location (an address in computer memory).
//So varName is just a reference to its type (actually this might be at the memory location), and a reference to its memory location.
//"=" for primitives is actually the bytes used to store the information.
//So imagine that all objects assignments are just references to references to references UNTIL they run into a primitive
//and then that really exists!  It is amazing that all works rapidly, but it does.

//What is really going on in a programming language is "words" - "variable" are mapped to memory locations.  And we keep referencing
//memory locations into one another.  Until they get down to primitives.  Classes are just organized sets of references.



What on a base level is is each part doing?

gitignores what the heck? how do you do these in a clean fashion? are there syntax(right word?) standards?
//not good at this.
//google this.


General file structure for a project? What is a good file structure system (if there is such a thing) to follow?
//Yes - follow Maven.
//Start a de novo project.  Bring in libraries through the pom file.  Code in one folder, Test code in another parallel
//folder.  Resources in another folder.


When and where to comment stuff?
//All methods and class need to be documented.
//Then any clever thing in the code that take more than 10sec to figure out.



